{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Nullable_AxonInfo",
  "anyOf": [
    {
      "$ref": "#/definitions/AxonInfo"
    },
    {
      "type": "null"
    }
  ],
  "definitions": {
    "AxonInfo": {
      "type": "object",
      "required": [
        "block",
        "ip",
        "ip_type",
        "placeholder1",
        "placeholder2",
        "port",
        "protocol",
        "version"
      ],
      "properties": {
        "block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ip": {
          "$ref": "#/definitions/Uint128"
        },
        "ip_type": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "placeholder1": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "placeholder2": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "port": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "protocol": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "version": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
